import numpy as np

from display import Display, PygameDisplay, ConsoleDisplay

from model.tetris.constants import tetromino_shapes
from game_state import State

def main() -> None:
    
    p: Display

    # p = PygameDisplay({value.get_name(): i + 1 for i, value in enumerate(tetromino_shapes)})
    p = ConsoleDisplay()

    board = np.array(
        [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 7, 0, 0, 0],
            [0, 4, 0, 0, 6, 0, 7, 7, 0, 0],
            [0, 4, 0, 6, 6, 0, 5, 7, 1, 0],
            [4, 4, 3, 6, 2, 2, 5, 5, 1, 0],
            [3, 3, 3, 3, 2, 2, 5, 3, 1, 0],
            [1, 3, 3, 3, 5, 3, 3, 3, 1, 0],
            [1, 3, 3, 5, 5, 5, 4, 4, 4, 0],
            [1, 4, 3, 5, 5, 5, 7, 7, 4, 0],
        ],
        dtype=np.uint8,
    )

    current_board = np.array(
        [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ],
        dtype=np.uint8,
    )

    ghost_board = np.array(
        [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        ],
        dtype=np.uint8,
    )

    info = {"score": "13314", "level": "3", "lines": "38", "time": "2:42"}

    queue = [
        np.array(
            [
                [1, 1, 1, 1],
            ]
        ),
        np.array(
            [
                [0, 2, 0],
                [2, 2, 2],
            ]
        ),
        np.array(
            [
                [0, 1, 1],
                [1, 1, 0],
            ]
        ),
    ]

    held = np.array(
        [
            [1, 1, 1, 1],
        ]
    )

    sliding_value = 0.5
    d_sliding_value = 0.01
    
    while True:

        # Fade
        sliding_value += d_sliding_value

        if sliding_value > 1 - d_sliding_value:
            sliding_value = 0.9
            d_sliding_value = -abs(d_sliding_value)

        if sliding_value < d_sliding_value:
            sliding_value = 0.1
            d_sliding_value = abs(d_sliding_value)

        p.update(State(board, current_board, sliding_value, ghost_board, held, sliding_value > 0.5, queue, info, False, 0))



if __name__ == "__main__":
    main()